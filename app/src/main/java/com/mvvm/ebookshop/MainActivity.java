package com.mvvm.ebookshop;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.mvvm.ebookshop.databinding.ActivityMainBinding;
import com.mvvm.ebookshop.model.Book;
import com.mvvm.ebookshop.model.Category;
import com.mvvm.ebookshop.viewmodel.MainActivityViewModel;

import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity {
    private static final String TAG = "MainActivity";

    private MainActivityViewModel mainActivityViewModel;

    //ACTIVITYMAINBINDING CLASS IS GENERATED BY DATA BINDING LIBRARY
    private ActivityMainBinding activityMainBinding;
    private MainActivityClickHandlers mainActivityClickHandlers;

    private ArrayList<Category> categoriesList;
    private ArrayList<Book> booksList;

    //To get selected  category item from the drop down list
    private Category selectedCategory;

    private RecyclerView booksRecyclerView;
    private BooksRecyclerAdapter booksAdapter;


    public static final int ADD_BOOK_REQUEST_CODE = 12;
    public static final int EDIT_BOOK_REQUEST_CODE = 13;

    private int selectedBookIDToEdit;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Instantiate Main Activity Data Binding
        activityMainBinding = DataBindingUtil.setContentView(this,R.layout.activity_main);

        //Now create instance of MainActivityCLickHandlers
        mainActivityClickHandlers = new MainActivityClickHandlers();
        activityMainBinding.setClickHandlers(mainActivityClickHandlers);


        //for android view model
        mainActivityViewModel = new ViewModelProvider.AndroidViewModelFactory(getApplication()).create(MainActivityViewModel.class);

        //for normal view model use like this
        //mainActivityViewModel = new ViewModelProvider(MainActivity.this).get(MainActivityViewModel.class);

        mainActivityViewModel.getAllCategories().observe(this, new Observer<List<Category>>() {
            @Override
            public void onChanged(List<Category> categories) {
                categoriesList = (ArrayList<Category>) categories;
                showOnSpinner();
            }
        });
    }

    private void loadRecyclerView(){
        booksRecyclerView = activityMainBinding.secondaryLayout.rvBooks;
        booksRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        booksRecyclerView.setHasFixedSize(true);
        booksAdapter = new BooksRecyclerAdapter();
        booksRecyclerView.setAdapter(booksAdapter);
        booksAdapter.setBooksList(booksList);

        booksAdapter.setListener(new BooksRecyclerAdapter.OnRecyclerItemClickListener() {
            @Override
            public void onBookItemClick(Book book) {
                selectedBookIDToEdit = book.getBookID();
                Intent intent = new Intent(MainActivity.this,AddAndEditActivity.class);
                intent.putExtra(AddAndEditActivity.BOOK_ID,selectedBookIDToEdit);
                intent.putExtra(AddAndEditActivity.BOOK_NAME,book.getBookName());
                intent.putExtra(AddAndEditActivity.BOOK_PRICE,book.getUnitPrice());
                startActivityForResult(intent,EDIT_BOOK_REQUEST_CODE);
            }
        });

        new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0,ItemTouchHelper.LEFT) {
            @Override
            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
                return false;
            }

            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
                Book bookToDelete = booksList.get(viewHolder.getAdapterPosition());
                mainActivityViewModel.deleteBook(bookToDelete);
            }
        }).attachToRecyclerView(booksRecyclerView);
    }

    private void showOnSpinner(){
        ArrayAdapter<Category> categoryArrayAdapter = new ArrayAdapter<>(this,R.layout.spinner_item,categoriesList);
        //categoryArrayAdapter.setDropDownViewResource(R.layout.spinner_item);
        activityMainBinding.setSpinnerAdapter(categoryArrayAdapter);
    }

    private void loadBooksArrayList(int categoryId){
        mainActivityViewModel.getBooksOfSelectedCategory(categoryId).observe(this, new Observer<List<Book>>() {
            @Override
            public void onChanged(List<Book> books) {
                booksList = (ArrayList<Book>) books;
                loadRecyclerView();
            }
        });
    }

    public class MainActivityClickHandlers{
        public void onFABClicked(View v){
            Intent intent = new Intent(MainActivity.this,AddAndEditActivity.class);
            startActivityForResult(intent,ADD_BOOK_REQUEST_CODE);
        }

        public void onSelectItem(AdapterView<?> parent,View view, int pos, long id){
            selectedCategory = (Category) parent.getItemAtPosition(pos);
            loadBooksArrayList(selectedCategory.getId());

            /*String msg = "ID is "+selectedCategory.getId()+
                    " \n Category Name is "+selectedCategory.getCategoryName()+
                    " \n Description is "+selectedCategory.getCategoryDescription();

            Toast.makeText(parent.getContext(), msg, Toast.LENGTH_SHORT).show();*/

        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        int selectedCategoryID = selectedCategory.getId();
        if(requestCode == ADD_BOOK_REQUEST_CODE && resultCode == RESULT_OK){
            Book book= new Book();
            book.setCategoryId(selectedCategoryID);
            book.setBookName(data.getStringExtra(AddAndEditActivity.BOOK_NAME));
            book.setUnitPrice(data.getStringExtra(AddAndEditActivity.BOOK_PRICE));
            mainActivityViewModel.addNewBook(book);
        }else if(requestCode == EDIT_BOOK_REQUEST_CODE && resultCode == RESULT_OK){
            Book book= new Book();
            book.setCategoryId(selectedCategoryID);
            book.setBookName(data.getStringExtra(AddAndEditActivity.BOOK_NAME));
            book.setUnitPrice(data.getStringExtra(AddAndEditActivity.BOOK_PRICE));
            book.setBookID(selectedBookIDToEdit);
            mainActivityViewModel.updateBook(book);

        }

    }
}
